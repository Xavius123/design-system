// Auto-generated SCSS Theme Map and Mixin

$themes: (
  light: (
    color-light-background-primary: $color-light-background-primary,
    color-light-background-secondary: $color-light-background-secondary,
    color-light-background-tertiary: $color-light-background-tertiary,
    color-light-surface-primary: $color-light-surface-primary,
    color-light-surface-secondary: $color-light-surface-secondary,
    color-light-surface-tertiary: $color-light-surface-tertiary,
    color-light-text-primary: $color-light-text-primary,
    color-light-text-secondary: $color-light-text-secondary,
    color-light-text-tertiary: $color-light-text-tertiary,
    color-light-text-inverse: $color-light-text-inverse,
    color-light-border-primary: $color-light-border-primary,
    color-light-border-secondary: $color-light-border-secondary,
    color-light-border-focus: $color-light-border-focus,
    color-light-accent-primary: $color-light-accent-primary,
    color-light-accent-secondary: $color-light-accent-secondary,
  ),
  dark: (
    color-dark-background-primary: $color-dark-background-primary,
    color-dark-background-secondary: $color-dark-background-secondary,
    color-dark-background-tertiary: $color-dark-background-tertiary,
    color-dark-surface-primary: $color-dark-surface-primary,
    color-dark-surface-secondary: $color-dark-surface-secondary,
    color-dark-surface-tertiary: $color-dark-surface-tertiary,
    color-dark-text-primary: $color-dark-text-primary,
    color-dark-text-secondary: $color-dark-text-secondary,
    color-dark-text-tertiary: $color-dark-text-tertiary,
    color-dark-text-inverse: $color-dark-text-inverse,
    color-dark-border-primary: $color-dark-border-primary,
    color-dark-border-secondary: $color-dark-border-secondary,
    color-dark-border-focus: $color-dark-border-focus,
    color-dark-accent-primary: $color-dark-accent-primary,
    color-dark-accent-secondary: $color-dark-accent-secondary,
  ),
);

@mixin themed() {
  @each $theme, $map in $themes {
    .theme--#{$theme} & {
      $theme-map: () !global;

      @each $key, $value in $map {
        $theme-map: map.merge($theme-map, ($key: $value)) !global;
      }

      @content;
      $theme-map: null !global;
    }
  }
}

@function t($key) {
  @return map.get($theme-map, $key);
}

// Usage:
// .button {
//   @include themed() {
//     background-color: t("bg");
//     color: t("text");
//   }
// }
