import StyleDictionary from 'style-dictionary/lib/StyleDictionary.js';

StyleDictionary.registerFormat({
  name: 'scss/getters',
  formatter: function(dictionary, config) {
    const tokens = dictionary.allTokens;
    const lightTokens = tokens.filter(token => token.filePath.includes('colors-light'));
    const darkTokens = tokens.filter(token => token.filePath.includes('colors-dark'));
    
    let output = '// Theme Getter Functions\n';
    output += '// Auto-generated by Style Dictionary\n\n';
    
    // Create a map of all theme variables
    output += '$theme-variables: (\n';
    
    // Add light theme variables
    lightTokens.forEach(token => {
      const name = token.name.replace('ColorLight', '').toLowerCase();
      output += `  'light-${name}': $${token.name},\n`;
    });
    
    // Add dark theme variables
    darkTokens.forEach(token => {
      const name = token.name.replace('ColorDark', '').toLowerCase();
      output += `  'dark-${name}': $${token.name},\n`;
    });
    
    output += ');\n\n';
    
    // Create getter function
    output += '@function get-theme-color($key, $theme: "light") {\n';
    output += '  $full-key: "#{$theme}-#{$key}";\n';
    output += '  @if map-has-key($theme-variables, $full-key) {\n';
    output += '    @return map-get($theme-variables, $full-key);\n';
    output += '  }\n';
    output += '  @warn "Theme color \'#{$full-key}\' not found in $theme-variables map.";\n';
    output += '  @return null;\n';
    output += '}\n\n';
    
    // Create convenience functions
    output += '@function light-color($key) {\n';
    output += '  @return get-theme-color($key, "light");\n';
    output += '}\n\n';
    
    output += '@function dark-color($key) {\n';
    output += '  @return get-theme-color($key, "dark");\n';
    output += '}\n\n';
    
    // Create CSS custom property getter
    output += '@function css-var($key, $theme: "light") {\n';
    output += '  @return var(--color-#{$theme}-#{$key});\n';
    output += '}\n\n';
    
    // Create theme mixin
    output += '@mixin theme-colors($theme: "light") {\n';
    output += '  @if $theme == "light" {\n';
    lightTokens.forEach(token => {
      const name = token.name.replace('ColorLight', '').toLowerCase();
      output += `    --color-light-${name}: $${token.name};\n`;
    });
    output += '  } @else if $theme == "dark" {\n';
    darkTokens.forEach(token => {
      const name = token.name.replace('ColorDark', '').toLowerCase();
      output += `    --color-dark-${name}: $${token.name};\n`;
    });
    output += '  }\n';
    output += '}\n\n';
    
    // Create usage examples
    output += '// Usage Examples:\n';
    output += '// .my-component {\n';
    output += '//   background-color: light-color("background-primary");\n';
    output += '//   color: dark-color("text-primary");\n';
    output += '//   border-color: css-var("border-primary", "light");\n';
    output += '// }\n';
    
    return output;
  }
}); 